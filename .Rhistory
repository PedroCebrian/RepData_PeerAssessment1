install.packages("vgam")
install.packages("VGAM")
# use the degree() function and options for calculating directed degree
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa2/OPA2Template.R', echo=TRUE)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa2/OPA2Template.R', echo=TRUE)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa2/OPA2Template.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fix(g)
fix(a)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa2/OPA2Template.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa2/OPA2Template.R', echo=TRUE)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa2/OPA2Template.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
graph.modularity(g)
#graph.modularity(g)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa3/OPA3communityTemplate.R', echo=TRUE)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa3/OPA3communityTemplate.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fix(imc)
fix(imc)
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa3/OPA3communityTemplate.R')
source('C:/Users/Pedro/Desktop/Coursera/Social Networks/pa3/OPA3communityTemplate.R', echo=TRUE)
sizes(imc)
V(g)$label[membership(fc)==30]
V(g)$label[membership(imc)==30]
max(graph.coreness(as.undirected(g)))
install.packages("statnet")
library("statnet")
data("florentine")
summary(flomarriage)
model1
model1 <- ergm(flomarriage ~ edges)
summary(model1)
model2 <- ergm(flomarriage ~ edges + triangles)
summary(model2)
model2 <- ergm(flomarriage ~ edges + triangles)
summary(model2)
model2 <- ergm(flomarriage ~ edges + triangles)
summary(model2)
model2 <- ergm(flomarriage ~ edges + triangles)
summary(model2)
rpoisson
rpoisson.help
dpoisson
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset = dataFrame(heightsCM > 188)
dataFrameSubset = dataFrame[heightsCM > 188]
dataFrame
dataFrameSubset = dataFrame[heightsCM > 188, ]
dataFrameSubset
mean(dataFrameSubset$weightsK)
set.seed(41)
rcauchy
set.seed(41)
variables = rcauchy(100)
set.seed(415)
sample = sample(variables, size=10, replace=T)
sample
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
b<-x[[1]]
x <- 1:4
y <- 2
x+y
x <- 4
class(x)
typeof(x)
x <- c(4, "a", TRUE)
x <- c(3, 5, 1, 10, 12, 6)
fix(x)
x[x %in% 1:5] <- 0
fix(x)
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
subset <- iris[iris$species == virginica]
subset <- iris[iris$Species == virginica]
subset <- iris[iris$Species == virginica,]
iris[iris$Species == virginica,]
iris$Species
iris$Species==virginica
iris[iris$Species == "virginica",]
subset <-iris[iris$Species == "virginica",]
mean(subset$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls()
help ls
?ls
?debug
?ls
ls
debug(ls)
ls
ls()
sd(c(5,8,12))
which.min(c(4,1,6))
WHO=read.csv("WHO.csv")
?read.csv
WHO=read.csv(WHO.csv)
getwd()
getwd()
WHO=read.csv("C:/Users/Pedro/Desktop/Coursera/Analytics Edge/Datasets/WHO.csv")
str(WHO)
mean(WHO$Over60)
WHO$Country[which.min(WHO$Over60)]
WHO$Country[which.ax(WHO$LiteracyRate)]
WHO$Country[which.max(WHO$LiteracyRate)]
swirl()
library(swirl)
install.packages("swirl")
install.packages("xlsx")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
?´:´
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char, "Pedro")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
exit()
exit
quit
myvector<-1:20
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)<-cnames
myData
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
set.seed(1)
rpois(5, 2)
install.packages("ggplot2")
library("ggplot2")
library(ggplot2)
qplot(votes, rating, data = movies)
summary(movies)
qplot(votes, rating, data = movies, panel = panel.loess)
setwd("C:/Users/Pedro/Desktop/Coursera/Data Analysis Specialization/Rhome/5-Reproducible Research/week2/RepData_PeerAssessment1")
?strptime
install.packages("knitr")
library("knitr", lib.loc="C:/Users/Pedro/Documents/R/win-library/3.0")
library("ggplot2", lib.loc="C:/Users/Pedro/Documents/R/win-library/3.0")
?unz
?read.csv
con <- unz(fname, "activity.csv")
fname <- "activity.zip"
con <- unz(fname, "activity.csv")
data <- read.csv(con, colClasses=c("numeric","character","character"))
close(con)
str(con)
close(con)
?unz
isOpen(con)
str(data)
data$date<-as.factor(data$date)
data$interval<-as.factor(data$interval)
str(data)
mdata <- melt(data, id="interval")
library(reshape2)
mdata <- melt(data, id="interval")
View(mdata)
means <- cast(mdata, interval~variable, mean)
means <- dcast(mdata, interval~variable, mean)
View(means)
means <- dcast(mdata, interval~variable, mean,na.rm=T)
View(means)
warnings()
View(mdata)
View(data)
mdata <- melt(data, id=c("interval","date"))
View(mdata)
means <- dcast(data, interval~value, mean,na.rm=T)
View(data)
means <- dcast(data, interval~steps, mean,na.rm=T)
View(means)
str data
str(data)
mdata <- melt(data, id=c("interval","date"))
View(mdata)
means <- dcast(mdata, interval~value, mean,na.rm=T)
means <- dcast(mdata, interval~variable, mean,na.rm=T)
View(means)
meansdate <- dcast(mdata, date~variable, mean,na.rm=T)
View(meansdate)
