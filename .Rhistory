mean(dataFrameSubset$weightsK)
set.seed(41)
rcauchy
set.seed(41)
variables = rcauchy(100)
set.seed(415)
sample = sample(variables, size=10, replace=T)
sample
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
b<-x[[1]]
x <- 1:4
y <- 2
x+y
x <- 4
class(x)
typeof(x)
x <- c(4, "a", TRUE)
x <- c(3, 5, 1, 10, 12, 6)
fix(x)
x[x %in% 1:5] <- 0
fix(x)
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
subset <- iris[iris$species == virginica]
subset <- iris[iris$Species == virginica]
subset <- iris[iris$Species == virginica,]
iris[iris$Species == virginica,]
iris$Species
iris$Species==virginica
iris[iris$Species == "virginica",]
subset <-iris[iris$Species == "virginica",]
mean(subset$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls()
help ls
?ls
?debug
?ls
ls
debug(ls)
ls
ls()
sd(c(5,8,12))
which.min(c(4,1,6))
WHO=read.csv("WHO.csv")
?read.csv
WHO=read.csv(WHO.csv)
getwd()
getwd()
WHO=read.csv("C:/Users/Pedro/Desktop/Coursera/Analytics Edge/Datasets/WHO.csv")
str(WHO)
mean(WHO$Over60)
WHO$Country[which.min(WHO$Over60)]
WHO$Country[which.ax(WHO$LiteracyRate)]
WHO$Country[which.max(WHO$LiteracyRate)]
swirl()
library(swirl)
install.packages("swirl")
install.packages("xlsx")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
?´:´
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char, "Pedro")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
exit()
exit
quit
myvector<-1:20
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)<-cnames
myData
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
set.seed(1)
rpois(5, 2)
install.packages("ggplot2")
library("ggplot2")
library(ggplot2)
qplot(votes, rating, data = movies)
summary(movies)
qplot(votes, rating, data = movies, panel = panel.loess)
?pbinom
pbinom(3,5,0.5,lower.tail=F)
?ppois
ppois(10,5,3)
?qnorm
qnorm(95,1100,75)
qnorm(0.95,1100,75)
qnorm(0.95,1100,75/10)
ppois(10,5,3)
?ppois
ppois(10,15)
?pnorm
pnorm(-0.1)
2*(0.5-pnorm(-0.1))
2*(0.5-pnorm(-1))
?t.test
n<-9
mean<-1100
sd<-30
mean+c(-1,1)*qt(0.975,n-1)*sd/sqrt(n)
2*sqrt(n)/qt(0.975,n-1)
mean<--2
sd<-2.60
mean+c(-1,1)*qt(0.975,n-1)*sd/sqrt(n)
mean<--4
sd<-1.4
mean+c(-1,1)*qt(0.95,n-1)*sd/sqrt(n)
sd<-1.65
mean+c(-1,1)*qt(0.95,n-1)*sd/sqrt(n)
n<-18
mean+c(-1,1)*qt(0.95,n-1)*sd/sqrt(n)
n<-9
mean+c(-1,1)*qt(0.95,n-1)*sd/sqrt(n)
mean+c(-1,1)*qt(0.975,n-1)*sd/sqrt(n)
pnorm()
?pnorm
pnorm(11.342,12,0.4,lower.tail=F)
?t.test
?pnorm
qnorm(0.05)
qnorm(0.025)
?pbinom
pbinom(0.75,4,0.5,lower.tail=F)
qbinom(0.75,4,0.5)
pbinom(3,4,0.5,lower.tail=F)
ppois(9,17.87,lower.tail=F)
ppois(10,17.87)
power.t.test(n=100,delta=0.01,sd=0.04type="one.sample",alt="one.sided")$power
power.t.test(n=100,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$power
power.t.test(power=0.9,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$n
x1<- c(140,138,150,148,135)
x2<-c(132,135,151,146,130)
t.test(x1, x2, paired=TRUE, alternative="two.sided, var.equal=TRUE)
)
)
""
"
t.test(x1, x2, paired=TRUE, alternative="two.sided", var.equal=TRUE)
sp<-sqrt((8*1.5^2+8*1.8^2)/16)
4+c(-1,1)*qt(0.95,16)*sp*0.25^.5
4+c(-1,1)*qt(0.99,16)*sp*0.25^.5
4+c(-1,1)*qt(0.90,16)*sp*0.25^.5
z.test = function(a, mu, var){
zeta = (mean(a) - mu) / (sqrt(var / length(a)))
return(zeta)
}
z.test = function(a, mu, var, n){
zeta = (mean(a) - mu) / (sqrt(var / n))
return(zeta)
}
z.test(44,42.04,12^2,288)
b<-z.test(44,42.04,12^2,288)
?pnorm
pnorm(b)
(1-pnorm(b))*2
?t.test
?qt
qt(0.025,8)
1100+c(-1,1)*qt(0.90,16)*30*(1/3)^.5
pbinom(2,4,0.5,lower.tail=F)
power.t.test(power=0.9,delta=0.01,sd=0.04,type="one.sample",alt="one.sided")$n
power.t.test(power=0.9,delta=0.01,sd=0.04,type="one.sample",alt="one.sided",paired=T)$n
?power.t.test
power.t.test(power=0.9,delta=0.01,sd=0.04,type="paired",alt="one.sided")$n
z.test2sam = function(a, b, var.a, var.b,n){
n.a = n
n.b = n
zeta = (a - b) / (sqrt(var.a/n.a + var.b/n.b))
return(zeta)
}
z.test2sam(44,42.04,12^2,12^2,288)
pnorm(1.96,lower.tail=F)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
sum((w*(x-a))^2)
a<-0.0025
sum((w*(x-a))^2)
a<-0.3
sum((w*(x-a))^2)
sum(w*(x-a)^2)
a<-0.0025
sum(w*(x-a)^2)
a<-0.1471
sum(w*(x-a)^2)
a<-1.077
sum(w*(x-a)^2)
sum(w*x)/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(x~y)
?lm
lm(y~x -1)
data(mtcars)
data(mpg~weight,data=mtcars)
mtcars
data(mpg~weight,data=mtcars)
names(mtcarsw)
names(mtcars)
data(mpg~wt,data=mtcars)
data(I(mpg)~I(wt),data=mtcars)
lm(mpg~wt,data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/Pedro/Desktop/Coursera/Data Analysis Specialization/Rhome/5-Reproducible Research/week2/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fname <- "activity.zip"
con <- unz(fname, "activity.csv")
data <- read.csv(con, colClasses=c("numeric","character","character"))
?close
isOpen(con)
summary(con)
str(con)
unlink(con)
source('~/.active-rstudio-document', echo=TRUE)
max(avStepsPerInterval)
View(avStepsPerInterval)
View(avStepsPerInterval$steps)
max(avStepsPerInterval$steps)
?max
with(avStepsPerInterval,{interval[which.max(steps)]})
with(avStepsPerInterval,{which.max(steps)})
maxInterval <- with(avStepsPerInterval,{interval[which.max(steps)]})
sprintf("%04d",maxInterval)
length(maxInterval)
length(as.character(maxInterval))
as.character(maxInterval)
c<-as.character(maxInterval)
c[1]
c[1][1]
sprintf("%02d:%02d", maxInterval%/%100, maxInterval%%100)
temp <- weekdays(filledData$date) %in% c("sabado", "domingo")
filledData$weekday <- ""
str(temp)
summary(temp)
?ifelse
temp <- weekdays(filledData$date) %in% c("sabado", "domingo")
filledData$weekday <- ifelse(temp,"weekend","weekday")
View(filledData)
temp <- weekdays(filledData$date) %in% c("sabado", "domingo")
filledData$weekday <- ifelse(temp,"weekend","weekday")
transform(filledData, weekday = as.factor(weekday))
str(filledData)
temp <- weekdays(filledData$date) %in% c("sabado", "domingo")
filledData$weekday <- ifelse(temp,"weekend","weekday")
filledData <- transform(filledData, weekday = as.factor(weekday))
str(filledData)
a<-melt(filledData, id=c("interval", "weekday"))
b<-dcast(mdata, weekday + interval~variable, sum, na.rm=T)
View(a)
b<-dcast(a, weekday + interval~variable, mean)
b<-dcast(a, weekday + interval~variable, sum)
View(b)
b<-dcast(a, weekday + interval~variable, fun.aggregate = mean)
a<-melt(filledData, id.vars=c("interval", "weekday"), measure.vars="steps")
View(a)
b<-dcast(a, weekday + interval~variable, fun.aggregate = mean)
b<-dcast(a, weekday + interval~variable, fun.aggregate = sum)
View(b)
is.na(a$steps)
is.na(a$values)
is.na(a$value)
sum(is.na(a$value))
str(a)
mean(a$value)
b<-acast(a, weekday + interval~variable, fun.aggregate = sum)
View(b)
b<-acast(a, weekday + interval~variable, fun.aggregate = mean)
?aggregate
f<-aggregate(filledData, by=list(weekday,interval),
FUN=mean)
View(filledData)
f<-aggregate(filledData, by=list(interval),FUN=mean)
f<-aggregate(filledData, by=list(filledData$interval,filledData$weekday),FUN=mean)
View(f)
f<-aggregate(filledData$steps, by=list(filledData$interval,filledData$weekday),FUN=mean)
View(f)
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
View(weekdayAvg)
library(ggplot2)
qplot(x,Group.2,data=weekdayAvg,facets=Group.1~.)
qplot(x,as.numeric(Group.2),data=weekdayAvg,facets=Group.1~.)
qplot(as.numeric(Group.2),x,data=weekdayAvg,facets=Group.1~.)
qplot(Group.2,x,data=weekdayAvg,facets=Group.1~.)
qplot(Group.2,x,data=weekdayAvg,geom="density",color="Group.1")
qplot(Group.2,x,data=weekdayAvg,geom="density",color=Group.1)
qplot(Group.2,x,data=weekdayAvg,geom="line",color=Group.1)
qplot(Group.2,x,data=weekdayAvg,color=Group.1)
qplot(Group.2,x,data=weekdayAvg,color=Group.1,geom="hline")
qplot(Group.2,x,data=weekdayAvg,color=Group.1,geom="line")
qplot(Group.2,x,data=weekdayAvg,color=Group.1)
qplot(Group.2,x,data=weekdayAvg,color=Group.1)+geom_line()
names(weekdayAvg)
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
library(ggplot2)
qplot(stepsAvg, interval, data=weekdayAvg, color=day)
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
library(ggplot2)
qplot(interval, stepsAvg, data=weekdayAvg, color=day)
sprintf("%02d:%02d", weekdayAvg$interval%/%100, weekdayAvg$interval%%100)
sprintf("%02d:%02d", as.character(weekdayAvg$interval)%/%100, as.character(weekdayAvg$interval)%%100)
sprintf("%02d:%02d", as.numeric(weekdayAvg$interval)%/%100, as.numeric(weekdayAvg$interval)%%100)
sprintf("%02d:%02d", as.numeric(levels(weekdayAvg$interval))%/%100, as.numeric(levels(weekdayAvg$interval))%%100)
?sort
?order
weekdayAvg[order(interval),]
weekdayAvg[order(weekdayAvg$interval),]
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
weekdayAvg <- transform(weekdayAvg, interval=as.integer(levels(data$interval))
weekdayAvg <- weekdayAvg[order(weekdayAvg$interval),]
library(ggplot2)
qplot(interval, stepsAvg, data=weekdayAvg, color=day)
View(weekdayAvg)
View(weekdayAvg)
str(weekdayAvg)
weekdayAvg <- transform(weekdayAvg, interval=as.integer(levels(data$interval))
)
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
weekdayAvg <- transform(weekdayAvg, interval=as.integer(levels(data$interval)))
weekdayAvg <- weekdayAvg[order(weekdayAvg$interval),]
library(ggplot2)
qplot(interval, stepsAvg, data=weekdayAvg, color=day)
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
weekdayAvg <- transform(weekdayAvg, interval=as.integer(levels(data$interval)))
weekdayAvg <- weekdayAvg[order(weekdayAvg$interval),]
library(ggplot2)
qplot(interval, stepsAvg, data=weekdayAvg, facets=day~.)
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
weekdayAvg <- transform(weekdayAvg, interval=as.integer(levels(data$interval)))
weekdayAvg <- weekdayAvg[order(weekdayAvg$interval),]
library(ggplot2)
qplot(interval, stepsAvg, data=weekdayAvg, facets=day~.)+geom_line()
weekdayAvg <- with(filledData, {aggregate(steps, list(weekday, interval), mean)})
names(weekdayAvg) <- c("day", "interval", "stepsAvg")
weekdayAvg <- transform(weekdayAvg, interval=as.integer(levels(data$interval)))
weekdayAvg <- weekdayAvg[order(weekdayAvg$interval),]
library(ggplot2)
qplot(interval, stepsAvg, data=weekdayAvg, color=day)
View(weekdayAvg)
